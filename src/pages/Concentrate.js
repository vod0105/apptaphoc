import React, { useEffect, useState, useMemo } from "react";
import { useLocation } from "react-router-dom";
import { db, auth } from "../firebase";
import { collection, setDoc, updateDoc, doc, getDoc, Timestamp } from "firebase/firestore";
import "../styles/Concentrate.css";
import { MoreVertical } from "lucide-react";
import { useTheme } from "../context/ThemeContext";
import Snowflakes from "../components/Snow";

export default function Concentrate() {
  const { state } = useLocation();
  const initialMinutes =
    state?.minutes ?? state?.studyTime ?? state?.focusTime ?? 0;
  const job = state?.job ?? state?.selectedJob ?? "General";
  const userId = state?.userId ?? null;
  const initSection = state?.sectionId ?? null;

  const [periods, setPeriods] = useState([]);
  const [currentIndex, setCurrentIndex] = useState(0); // index c·ªßa period hi·ªán t·∫°i
  const [secondsLeft, setSecondsLeft] = useState(0); // gi√¢y c√≤n l·∫°i trong period hi·ªán t·∫°i
  const [isRunning, setIsRunning] = useState(true);
  const [sessionId, setSessionId] = useState(initSection); // L∆∞u ID c·ªßa document phi√™n h·ªçc
  const [actualFocusMinutes, setActualFocusMinutes] = useState(0);
  // T·∫°o audio object
  const breakSound = new Audio("/sounds/break.mp3");
  const focusSound = new Audio("/sounds/focus.mp3");

  const [viewMode, setViewMode] = useState("circle"); // circle | tree | candle
  const [menuOpen, setMenuOpen] = useState(false);


  const [quote, setQuote] = useState("");
  const quotes = [
    "H√£y b·∫Øt ƒë·∫ßu ngay c·∫£ khi b·∫°n ch∆∞a s·∫µn s√†ng.",
    "M·ªói ng√†y l√† m·ªôt c∆° h·ªôi m·ªõi ƒë·ªÉ ti·∫øn b·ªô.",
    "K·ª∑ lu·∫≠t l√† c·∫ßu n·ªëi gi·ªØa m·ª•c ti√™u v√† th√†nh c√¥ng.",
    "Kh√¥ng c√≥ √°p l·ª±c, kh√¥ng c√≥ kim c∆∞∆°ng.",
    "B·∫°n gi·ªèi h∆°n b·∫°n nghƒ© r·∫•t nhi·ªÅu.",
    "Th·∫•t b·∫°i ch·ªâ l√† b∆∞·ªõc ƒë·ªám cho th√†nh c√¥ng.",
    "T·∫≠p trung h√¥m nay ƒë·ªÉ t·ª± h√†o ng√†y mai.",
    "Ki√™n tr√¨ l√† ch√¨a kh√≥a m·ªü m·ªçi c√°nh c·ª≠a.",
    "ƒêi ch·∫≠m kh√¥ng sao, mi·ªÖn l√† ƒë·ª´ng d·ª´ng l·∫°i.",
    "Ng∆∞·ªùi chi·∫øn th·∫Øng l√† ng∆∞·ªùi kh√¥ng bao gi·ªù b·ªè cu·ªôc."
  ];

  const { theme, toggleTheme } = useTheme();
  const [endTime, setEndTime] = useState(null); // Th·ªùi ƒëi·ªÉm k·∫øt th√∫c th·ª±c t·∫ø (timestamp)


  // Random 1 c√¢u khi load trang
  useEffect(() => {
    const randomIndex = Math.floor(Math.random() * quotes.length);
    setQuote(quotes[randomIndex]);
  }, []);

  // T√°ch th·ªùi gian th√†nh periods v√† x·ª≠ l√Ω phi√™n h·ªçc
  useEffect(() => {
    const p = splitIntoPeriods(initialMinutes);
    setPeriods(p);
    if (p.length > 0) setSecondsLeft(p[0].minutes * 60);
    setCurrentIndex(0);
    setIsRunning(true);
    const firstSeconds = p[0].minutes * 60;
    setSecondsLeft(firstSeconds);
    setEndTime(Date.now() + firstSeconds * 1000); // üî• ph·∫£i c√≥ d√≤ng n√†y


    const handleSession = async () => {
      if (!userId) return;
      if (sessionId) {
        // Ti·∫øp t·ª•c phi√™n h·ªçc c≈©
        try {
          const sessionRef = doc(db, "studySessions", sessionId);
          const sessionSnap = await getDoc(sessionRef);
          if (sessionSnap.exists()) {
            setActualFocusMinutes(sessionSnap.data().actualFocusMinutes);
          } else {
            console.error("Phi√™n h·ªçc kh√¥ng t·ªìn t·∫°i:", sessionId);
          }
        } catch (error) {
          console.error("L·ªói khi l·∫•y phi√™n h·ªçc:", error);
        }
      } else {
        // T·∫°o phi√™n h·ªçc m·ªõi
        try {
          const docRef = doc(collection(db, "studySessions"));
          const sessionData = {
            sessionId: docRef.id,
            userId,
            date: Timestamp.now(),
            job,
            totalFocusMinutes: initialMinutes,
            actualFocusMinutes: 0,
            remainingMinutes: initialMinutes,
            createdAt: Timestamp.now(),
            updatedAt: Timestamp.now(),
          };
          await setDoc(docRef, sessionData);
          console.log("Document created with ID:", docRef.id, "Data:", sessionData);
          setSessionId(docRef.id);
        } catch (error) {
          console.error("L·ªói khi t·∫°o phi√™n h·ªçc:", error);
        }
      }
    };
    handleSession();
  }, []);

  useEffect(() => {
    if (!isRunning || !endTime || !periods[currentIndex]) return; // ‚úÖ TH√äM D√íNG N√ÄY

    const id = setInterval(() => {
      const now = Date.now();
      const diff = Math.max(0, Math.floor((endTime - now) / 1000));
      setSecondsLeft(diff);

      if (diff <= 0) {
        clearInterval(id);

        // --- C·∫≠p nh·∫≠t Firestore ---
        const updateSession = async () => {
          if (userId && sessionId && periods[currentIndex].type === "focus") {
            try {
              const sessionRef = doc(db, "studySessions", sessionId);
              const newActualFocusMinutes = actualFocusMinutes + periods[currentIndex].minutes;
              const newRemainingMinutes = initialMinutes - newActualFocusMinutes;

              await updateDoc(sessionRef, {
                actualFocusMinutes: newActualFocusMinutes,
                remainingMinutes: newRemainingMinutes >= 0 ? newRemainingMinutes : 0,
                updatedAt: Timestamp.now(),
              });

              setActualFocusMinutes(newActualFocusMinutes);
            } catch (error) {
              console.error("L·ªói khi c·∫≠p nh·∫≠t phi√™n h·ªçc:", error);
            }
          }
        };
        updateSession();

        // --- Ph√°t √¢m thanh ---
        if (periods[currentIndex].type === "focus") {
          breakSound.play(); // H·∫øt focus th√¨ ngh·ªâ
        } else {
          focusSound.play(); // H·∫øt break th√¨ h·ªçc
        }

        if ('Notification' in window && Notification.permission === 'granted') {
          if (currentIndex < periods.length - 1) {
            new Notification(
              periods[currentIndex].type === "focus"
                ? "ƒê√£ h·∫øt th·ªùi gian t·∫≠p trung! ƒê·∫øn gi·ªù ngh·ªâ r·ªìi."
                : "ƒê√£ h·∫øt gi·ªù ngh·ªâ! Quay l·∫°i t·∫≠p trung nh√©."
            );
          } else {
            new Notification("Ch√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh phi√™n h·ªçc! üéâ");
          }
        }
        // --- Chuy·ªÉn sang period k·∫ø ---
        if (currentIndex < periods.length - 1) {
          const nextIndex = currentIndex + 1;
          setCurrentIndex(nextIndex);
          const nextSeconds = periods[nextIndex].minutes * 60;
          setSecondsLeft(nextSeconds);
          setEndTime(Date.now() + nextSeconds * 1000);
        } else {
          setSecondsLeft(0);
          setEndTime(null);
        }
      }
    }, 1000);

    return () => clearInterval(id);
  }, [
    isRunning,
    endTime,
    currentIndex,
    periods,
    userId,
    sessionId,
    actualFocusMinutes,
    initialMinutes,
  ]);


  // T√°ch th·ªùi gian th√†nh c√°c periods
  const splitIntoPeriods = (totalMinutes) => {
    const result = [];
    if (totalMinutes <= 60) {
      result.push({ type: "focus", minutes: totalMinutes });
      return result;
    }

    let remaining = totalMinutes;
    while (remaining > 0) {
      if (remaining > 60) {
        result.push({ type: "focus", minutes: 50 });
        remaining -= 50;

        if (remaining > 0) {
          const breakMin = Math.min(10, remaining);
          result.push({ type: "break", minutes: breakMin });
          remaining -= breakMin;
        }
      } else {
        result.push({ type: "focus", minutes: remaining });
        remaining = 0;
      }
    }
    return result;
  };

  if (periods.length === 0) return <div>No data</div>;

  const current = periods[currentIndex];
  const minutes = Math.floor(secondsLeft / 60);
  const seconds = secondsLeft % 60;

  // T√≠nh % progress trong period hi·ªán t·∫°i
  const totalCurrentSec = current.minutes * 60;
  const progressPct =
    totalCurrentSec > 0
      ? (1 - secondsLeft / totalCurrentSec) * 100
      : 100;

  // T√≠nh s·ªë l√° d·ª±a tr√™n progressPct
  const leafCount = Math.floor(progressPct / 20); // Th√™m l√° m·ªói 20%
  const leaves = [];
  for (let i = 0; i < leafCount; i++) {
    leaves.push(
      <path
        key={i}
        d={`M${50 + (i - 2) * 15} ${65 - i * 5} Q${40 + (i - 2) * 15} ${55 - i * 5} ${30 + (i - 2) * 15} ${65 - i * 5} Q${40 + (i - 2) * 15} ${75 - i * 5} ${50 + (i - 2) * 15} ${65 - i * 5} Z`}
        fill="#228B22"
        opacity={progressPct / 100}
      />
    );
  }

  const handleToggle = () => {
    if (isRunning) {
      // --- T·∫°m d·ª´ng ---
      setIsRunning(false);
      setEndTime(null); // X√≥a endTime ƒë·ªÉ d·ª´ng b·ªô ƒë·∫øm
    } else {
      // --- Ti·∫øp t·ª•c ho·∫∑c b·∫Øt ƒë·∫ßu m·ªõi ---
      const newEnd = Date.now() + secondsLeft * 1000;
      setEndTime(newEnd);
      setIsRunning(true);
    }
  };

  if (!periods.length || !periods[currentIndex]) return <div>ƒêang kh·ªüi t·∫°o...</div>;

  return (
    <div className="con-container">
      <div className="con-card">

        <Snowflakes />
        {/* Header */}
        <div className="con-head">
          <span className="con-dot">‚óÜ</span>
          <h2>{current.type === "focus" ? "Focus" : "Break"}</h2>
        </div>

        {/* Job */}
        {job && (
          <p className="con-job">
            Job: <strong>{job}</strong>
          </p>
        )}

        {/* Period info */}
        <p className="con-sub">
          {current.type === "focus"
            ? `Focus period (${currentIndex + 1} of ${periods.length})`
            : `Break period (${currentIndex + 1} of ${periods.length})`}
        </p>
        <div className="con-timer-wrapper">
          {/* Timer hi·ªÉn th·ªã kh√°c nhau theo viewMode */}
          {viewMode === "circle" && (
            <div className="dial" style={{ "--pct": `${progressPct}%` }}>
              <div className="dial-inner">
                <div className="dial-time">
                  {minutes}:{seconds.toString().padStart(2, "0")}
                </div>
              </div>
            </div>
          )}

          {viewMode === "tree" && (
            <div className="tree-timer" style={{ height: "280px" }}>
              <svg width="180" height="280" viewBox="0 0 100 280">
                {/* Ch·∫≠u c√¢y */}
                <ellipse cx="50" cy="260" rx="34" ry="14" fill="#6ba4f8" />
                <rect x="16" y="240" width="68" height="20" fill="#6ba4f8" rx="10" />
                {/* ƒê·∫•t */}
                <ellipse cx="50" cy="240" rx="30" ry="9" fill="#5a3623" />

                {/* Th√¢n c√¢y cong & to h∆°n */}
                <path
                  className="tree-trunk"
                  d="M50 240 
           C48 200, 52 160, 47 120 
           C53 90, 48 70, 50 40"
                  stroke="#2d5a27"
                  strokeWidth="12"
                  fill="none"
                  strokeLinecap="round"
                />

                {/* L√° */}
                {Array.from({ length: 5 }, (_, i) => {
                  const leafProgress = Math.floor(progressPct / 20);
                  const isActive = i < leafProgress;

                  // kho·∫£ng c√°ch d·ªçc gi·ªØa c√°c l√°
                  const step = 40;
                  const y = 200 - i * step;

                  if (i === 4) {
                    // üå± L√° tr√™n c√πng m·ªçc th·∫≥ng tr√™n th√¢n
                    return (
                      <rect
                        key={i}
                        x={50 - 17}
                        y={y - 17}
                        width="34"
                        height="34"
                        rx="4"
                        fill="#22c55e"
                        style={{
                          transformOrigin: `50px ${y}px`,
                          transform: isActive ? "scale(1)" : "scale(0.3)",
                          transition: "transform 0.5s ease",
                        }}
                      />
                    );
                  }

                  // üå± C√°c l√° hai b√™n c√≥ nh√°nh cong d√†i h∆°n
                  const side = i % 2 === 0 ? -1 : 1;
                  const offset = 55; // tƒÉng t·ª´ 40 l√™n 55
                  const x = 50 + side * offset;

                  return (
                    <g key={i}>
                      {/* Nh√°nh cong */}
                      <path
                        className="tree-branch"
                        d={`M50 ${y} Q ${50 + side * 25} ${y - 15}, ${x} ${y}`}
                        stroke="#2d5a27"
                        strokeWidth="4"
                        fill="none"
                      />
                      {/* L√° vu√¥ng */}
                      <rect
                        x={x - 17}
                        y={y - 17}
                        width="34"
                        height="34"
                        rx="4"
                        fill="#22c55e"
                        style={{
                          transformOrigin: `${x}px ${y}px`,
                          transform: isActive ? "scale(1)" : "scale(0.3)",
                          transition: "transform 0.5s ease",
                        }}
                      />
                    </g>
                  );
                })}
              </svg>
            </div>
          )}




          {viewMode === "candle" && (
            <div className="candle-timer">
              <div className="candle">
                <div
                  className="flame"
                  style={{ opacity: 1 - progressPct / 100 }}
                ></div>
                <div
                  className="wax"
                  style={{ height: `${100 - progressPct}%` }}
                ></div>
              </div>
              {/* <div className="dial-time">
                {minutes}:{seconds.toString().padStart(2, "0")}
              </div> */}
            </div>
          )}
        </div>
        {/* N√∫t ƒëi·ªÅu khi·ªÉn + Menu 3 ch·∫•m */}
        <div className="con-controls">
          {!(secondsLeft === 0 && currentIndex === periods.length - 1) && (
            <button
              className={`con-btn ${isRunning ? "pause" : "start"}`}
              onClick={handleToggle}
              aria-label={isRunning ? "Pause" : "Start"}
            >
              <span className="con-btn-icon">{isRunning ? "‚è∏" : "‚ñ∂"}</span>
            </button>
          )}

          {/* N√∫t 3 ch·∫•m */}
          <div className="menu-wrapper">
            <button className="menu-btn" onClick={() => setMenuOpen(!menuOpen)}>
              <MoreVertical size={17} />
            </button>
            {menuOpen && (
              <div className="menu-dropdown">
                {viewMode !== "circle" && (
                  <button onClick={() => {
                    setViewMode("circle");
                    setMenuOpen(false); // ƒë√≥ng dropdown
                  }}>‚≠ï</button>
                )}
                {viewMode !== "tree" && (
                  <button onClick={() => {
                    setViewMode("tree");
                    setMenuOpen(false); // ƒë√≥ng dropdown
                  }}>üå±</button>
                )}
                {viewMode !== "candle" && (
                  <button onClick={() => {
                    setViewMode("candle");
                    setMenuOpen(false); // ƒë√≥ng dropdown
                  }}>üïØÔ∏è</button>
                )}
              </div>
            )}
          </div>
        </div>


        {/* Status message */}
        <p className="con-next">
          {secondsLeft === 0 && currentIndex === periods.length - 1
            ? "Ho√†n th√†nh! Tuy·ªát v·ªùi üëè"
            : isRunning
              ? "ƒêang t·∫≠p trung..."
              : "ƒêang t·∫°m d·ª´ng"}
        </p>
        <p className="con-quote">üí° {quote}</p>

        {/* Toggle theme */}
        <button className="theme-toggle" onClick={toggleTheme}>
          {theme === "light" ? "üåô" : "‚òÄÔ∏è"}
        </button>
      </div>
    </div>
  );
}
