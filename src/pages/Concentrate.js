import React, { useEffect, useState } from "react";
import { useLocation } from "react-router-dom";
import { db, auth } from "../firebase";
import { collection, setDoc, updateDoc, doc, getDoc, Timestamp } from "firebase/firestore";
import "../styles/Concentrate.css";

export default function Concentrate() {
  const { state } = useLocation();
  const initialMinutes =
    state?.minutes ?? state?.studyTime ?? state?.focusTime ?? 0;
  const job = state?.job ?? state?.selectedJob ?? "General";
  const userId = state?.userId ?? null;
  const initSection = state?.sectionId ?? null;

  const [periods, setPeriods] = useState([]);
  const [currentIndex, setCurrentIndex] = useState(0); // index c·ªßa period hi·ªán t·∫°i
  const [secondsLeft, setSecondsLeft] = useState(0); // gi√¢y c√≤n l·∫°i trong period hi·ªán t·∫°i
  const [isRunning, setIsRunning] = useState(true);
  const [sessionId, setSessionId] = useState(initSection); // L∆∞u ID c·ªßa document phi√™n h·ªçc
  const [actualFocusMinutes, setActualFocusMinutes] = useState(0);



  const [quote, setQuote] = useState("");
  const quotes = [
    "H√£y b·∫Øt ƒë·∫ßu ngay c·∫£ khi b·∫°n ch∆∞a s·∫µn s√†ng.",
    "M·ªói ng√†y l√† m·ªôt c∆° h·ªôi m·ªõi ƒë·ªÉ ti·∫øn b·ªô.",
    "K·ª∑ lu·∫≠t l√† c·∫ßu n·ªëi gi·ªØa m·ª•c ti√™u v√† th√†nh c√¥ng.",
    "Kh√¥ng c√≥ √°p l·ª±c, kh√¥ng c√≥ kim c∆∞∆°ng.",
    "B·∫°n gi·ªèi h∆°n b·∫°n nghƒ© r·∫•t nhi·ªÅu.",
    "Th·∫•t b·∫°i ch·ªâ l√† b∆∞·ªõc ƒë·ªám cho th√†nh c√¥ng.",
    "T·∫≠p trung h√¥m nay ƒë·ªÉ t·ª± h√†o ng√†y mai.",
    "Ki√™n tr√¨ l√† ch√¨a kh√≥a m·ªü m·ªçi c√°nh c·ª≠a.",
    "ƒêi ch·∫≠m kh√¥ng sao, mi·ªÖn l√† ƒë·ª´ng d·ª´ng l·∫°i.",
    "Ng∆∞·ªùi chi·∫øn th·∫Øng l√† ng∆∞·ªùi kh√¥ng bao gi·ªù b·ªè cu·ªôc."
  ];

  // Random 1 c√¢u khi load trang
  useEffect(() => {
    const randomIndex = Math.floor(Math.random() * quotes.length);
    setQuote(quotes[randomIndex]);
  }, []);

  // T√°ch th·ªùi gian th√†nh periods v√† x·ª≠ l√Ω phi√™n h·ªçc
  useEffect(() => {
    const p = splitIntoPeriods(initialMinutes);
    setPeriods(p);
    if (p.length > 0) setSecondsLeft(p[0].minutes * 60);
    setCurrentIndex(0);
    setIsRunning(true);

    const handleSession = async () => {
      if (!userId) return;
      if (sessionId) {
        // Ti·∫øp t·ª•c phi√™n h·ªçc c≈©
        try {
          const sessionRef = doc(db, "studySessions", sessionId);
          const sessionSnap = await getDoc(sessionRef);
          if (sessionSnap.exists()) {
            setActualFocusMinutes(sessionSnap.data().actualFocusMinutes);
          } else {
            console.error("Phi√™n h·ªçc kh√¥ng t·ªìn t·∫°i:", sessionId);
          }
        } catch (error) {
          console.error("L·ªói khi l·∫•y phi√™n h·ªçc:", error);
        }
      } else {
        // T·∫°o phi√™n h·ªçc m·ªõi
        try {
          const docRef = doc(collection(db, "studySessions"));
          const sessionData = {
            sessionId: docRef.id,
            userId,
            date: Timestamp.now(),
            job,
            totalFocusMinutes: initialMinutes,
            actualFocusMinutes: 0,
            remainingMinutes: initialMinutes,
            createdAt: Timestamp.now(),
            updatedAt: Timestamp.now(),
          };
          await setDoc(docRef, sessionData);
          console.log("Document created with ID:", docRef.id, "Data:", sessionData);
          setSessionId(docRef.id);
        } catch (error) {
          console.error("L·ªói khi t·∫°o phi√™n h·ªçc:", error);
        }
      }
    };
    handleSession();
  }, []);

  // Timer countdown v√† c·∫≠p nh·∫≠t th·ªùi gian h·ªçc
  useEffect(() => {
    if (!isRunning || secondsLeft <= 0) return;

    const id = setInterval(() => {
      setSecondsLeft((prev) => {
        if (prev <= 1) {
          clearInterval(id);
          // C·∫≠p nh·∫≠t Firestore khi focus period ho√†n th√†nh
          const updateSession = async () => {
            if (userId && sessionId && periods[currentIndex].type === "focus") {
              try {
                const sessionRef = doc(db, "studySessions", sessionId);
                const newActualFocusMinutes = actualFocusMinutes + periods[currentIndex].minutes;
                const newRemainingMinutes = initialMinutes - newActualFocusMinutes;
                await updateDoc(sessionRef, {
                  actualFocusMinutes: newActualFocusMinutes,
                  remainingMinutes: newRemainingMinutes >= 0 ? newRemainingMinutes : 0,
                  updatedAt: Timestamp.now(),
                });
                setActualFocusMinutes(newActualFocusMinutes);
              } catch (error) {
                console.error("L·ªói khi c·∫≠p nh·∫≠t phi√™n h·ªçc:", error);
              }
            }
          };
          updateSession();

          // Chuy·ªÉn sang period ti·∫øp theo
          if (currentIndex < periods.length - 1) {
            const nextIndex = currentIndex + 1;
            setCurrentIndex(nextIndex);
            setSecondsLeft(periods[nextIndex].minutes * 60);
            return periods[nextIndex].minutes * 60;
          }
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(id);
  }, [isRunning, secondsLeft, currentIndex, periods, userId, sessionId, actualFocusMinutes, initialMinutes]);

  // T√°ch th·ªùi gian th√†nh c√°c periods
  const splitIntoPeriods = (totalMinutes) => {
    const result = [];
    if (totalMinutes <= 60) {
      result.push({ type: "focus", minutes: totalMinutes });
      return result;
    }

    let remaining = totalMinutes;
    while (remaining > 0) {
      if (remaining > 60) {
        result.push({ type: "focus", minutes: 50 });
        remaining -= 50;

        if (remaining > 0) {
          const breakMin = Math.min(10, remaining);
          result.push({ type: "break", minutes: breakMin });
          remaining -= breakMin;
        }
      } else {
        result.push({ type: "focus", minutes: remaining });
        remaining = 0;
      }
    }
    return result;
  };

  if (periods.length === 0) return <div>No data</div>;

  const current = periods[currentIndex];
  const minutes = Math.floor(secondsLeft / 60);
  const seconds = secondsLeft % 60;

  // T√≠nh % progress trong period hi·ªán t·∫°i
  const totalCurrentSec = current.minutes * 60;
  const progressPct =
    totalCurrentSec > 0
      ? (1 - secondsLeft / totalCurrentSec) * 100
      : 100;
  return (
    <div className="con-container">
      <div className="con-card">
        {/* Header */}
        <div className="con-head">
          <span className="con-dot">‚óÜ</span>
          <h2>{current.type === "focus" ? "Focus" : "Break"}</h2>
        </div>

        {/* Job */}
        {job && (
          <p className="con-job">
            Job: <strong>{job}</strong>
          </p>
        )}

        {/* Period info */}
        <p className="con-sub">
          {current.type === "focus"
            ? `Focus period (${currentIndex + 1} of ${periods.length})`
            : `Break period (${currentIndex + 1} of ${periods.length})`}
        </p>

        {/* Timer dial */}
        <div className="dial" style={{ "--pct": `${progressPct}%` }}>
          <div className="dial-inner">
            <div className="dial-time">
              {minutes}:{seconds.toString().padStart(2, "0")}
            </div>
          </div>
        </div>

        {/* Start/Pause button */}
        <button
          className={`con-btn ${isRunning ? "pause" : "start"}`}
          onClick={() => setIsRunning((v) => !v)}
          aria-label={isRunning ? "Pause" : "Start"}
        >
          <span className="con-btn-icon">{isRunning ? "‚è∏" : "‚ñ∂"}</span>
          {isRunning ? "Pause" : "Start"}
        </button>

        {/* Status message */}
        <p className="con-next">
          {secondsLeft === 0 && currentIndex === periods.length - 1
            ? "Ho√†n th√†nh! Tuy·ªát v·ªùi üëè"
            : isRunning
              ? "ƒêang t·∫≠p trung..."
              : "ƒêang t·∫°m d·ª´ng"}
        </p>
        <p className="con-quote">üí° {quote}</p>
      </div>
    </div>
  );
}
